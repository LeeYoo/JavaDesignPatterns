package Observer;

/**
 * Created by LIYAO-SZ on 2016/7/19.
 * 15【观察者模式】（行为型模式）
 *      是类和类之间的关系，不涉及到继承。简单来讲：就是当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系。
 *      观察者模式是对象的行为模式，又叫【发布-订阅模式】、【模型-视图模式】、【源-监听器模式】或【从属者模式】。
 *      观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。
 *
 *  模式由来：一个软件系统常常要求在某一个对象的状态发生变化的时候，某些其他的对象做出相应的改变。做到这一点的设计方案有很多，但是为了使系统能够易于复用，
 *           应该选择低耦合度的设计方案。减少对象之间的耦合有利于系统的复用，但是同时设计师需要使这些低耦合度的对象之间能够维持行动的协调一致，保证高度的协作。
 *           观察者模式是满足这一要求的各种设计方案中最重要的一种。
 *
 *  观察者模式涉及到四个角色：
 *          抽象主题角色：抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，
 *                      可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。
 *          具体主题角色：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。
 *          抽象观察者角色：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。
 *          具体观察者角色：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。
 *                        如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。
 *
 *
 *  观察者模式的分类：在观察者模式中，又分为推模型和拉模型两种方式。
 *          推模型：主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。
 *          拉模型：主题对象在通知观察者的时候，只传递少量信息（一般是将主题对象自己作为参数传递）。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，
 *                 相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把【主题对象自身】通过update()方法传递给观察者，这样在观察者需要获取数据的时候，
 *                 就可以通过这个引用来获取了。
 *
 *  推模型和拉模型的区别：
 *          1. 推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。
 *          2. 推模型可能会使得观察者对象难以复用，因为观察者的update()方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。
 *             这就意味着出现新情况的时候，就可能提供新的update()方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，
 *             update()方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。
 *
 *  扩展：Java本身对于观察者模式也提供了很好的支持，在JAVA语言的java.util库里面，提供了一个Observable类以及一个Observer接口，构成JAVA语言对观察者模式的支持。
 *          Observer接口：这个接口只定义了一个方法，即update()方法，当被观察者对象（主题角色）的状态发生变化时，它的notifyObservers()方法就会调用这一方法。
 *          Observable类：被观察者类（主题角色）都是java.util.Observable类的子类。java.util.Observable提供公开的方法支持观察者对象，
 *                       这些方法中有两个对Observable的子类非常重要：一个是setChanged()，另一个是notifyObservers()。
 *                       第一方法setChanged()被调用之后会设置一个内部标记变量，代表被观察者对象的状态发生了变化。第二个是notifyObservers()，
 *                       这个方法被调用时，会调用所有登记过的观察者对象的update()方法，使这些观察者对象可以更新自己。
 *                       Observable这个类代表一个被观察者对象，有时称之为主题对象。一个被观察者对象可以有数个观察者对象，每个观察者对象都是实现Observer接口的对象。
 *                       在被观察者发生变化时，会调用Observable的notifyObservers()方法，此方法调用所有的具体观察者的update()方法，从而使所有的观察者都被通知更新自己。
 *
 *  其他相关介绍： http://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html
 */
public class Client {

    public static void main(String[] args) {

        //创建主题对象
        MySubject subject = new MySubject();
        //创建观察者对象
        Observer observer = new Observer1();
        //将观察者对象登记到主题对象上
        subject.attach(observer);
        //改变主题对象的状态
        subject.change("new state");


    }
}
