package State;

/**
 * Created by LIYAO-SZ on 2016/7/28.
 * 20【状态模式】（行为型模式），又称为状态对象模式。
 *      状态模式允许一个对象在其内部状态改变的时候改变其行为。这个对象看上去就像是改变了它的类一样。
 *      用一句话来表述，状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。
 *      状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。
 *
 * 状态模式所涉及到的角色：
 *      1. 环境角色：
 *              定义客户端所感兴趣的接口，并且保留一个具体状态类的实例。这个具体状态类的实例给出此环境对象的现有状态。
 *      2. 抽象状态角色：
 *              定义一个接口，用以封装环境对象的一个特定的状态所对应的行为。
 *      3. 具体状态角色：
 *              每一个具体状态类都实现了环境的一个状态所对应的行为。
 *
 * 状态模式的使用场景：
 *      考虑一个在线投票系统的应用，要实现控制同一个用户只能投一票!
 *      如果一个用户反复投票，而且投票次数超过5次，则判定为恶意刷票，要取消该用户投票的资格，当然同时也要取消他所投的票；
 *      如果一个用户的投票次数超过8次，将进入黑名单，禁止再登录和使用系统。
 *      要使用状态模式实现，首先需要把投票过程的各种状态定义出来，根据以上描述大致分为四种状态：【正常投票、反复投票、恶意刷票、进入黑名单】。
 *      然后创建一个投票管理对象（相当于Context）。
 *
 * 更多详细介绍：http://www.cnblogs.com/java-my-life/archive/2012/06/08/2538146.html
 */
public class Client {

    public static void main(String[] args){

        //创建状态
        State state = new ConcreteStateB();
        //创建环境
        Context context = new Context();
        //将状态设置到环境中
        context.setState(state);
        //请求
        context.request("test");

        //-------------【投票案例】-------------
        VoteManager vm = new VoteManager();
        for(int i=0; i<9; i++){
            vm.vote("u1","A");
        }
    }
}
